Given an instruction about a machine learning algorithm, implement the relevant code based on this instruction.
You should implement the algorithm by using Python, Numpy or Scipy from scratch. You can't use any functions or classes from scikit-learn.
You only need to implement the algorithm module, and you don't need to generate test cases.
You should create as many sub-functions or sub-classes as possible to help you implement the entire algorithm.
Just output the code of the algorithm, don't output anything else.

Instruction:

Implement the Gaussian process classification (GPC) based on Laplace approximation for classification with python, numpy and scipy. It can handle multi-class classification problems. 

Internally, the Laplace approximation is used for approximating the non-Gaussian posterior by a Gaussian. Currently, the implementation is restricted to using the logistic link function. For multi-class classification, several binary one-versus rest classifiers are fitted. Note that this class thus does not implement a true multi-class Laplace approximation.
### Principles of Gaussian Process Classification

1. **Gaussian Processes:**
   A Gaussian process is a collection of random variables, any finite number of which have a joint Gaussian distribution. It is fully specified by its mean function \( m(x) \) and covariance function \( k(x, x') \). For a real process \( f(x) \), it is defined as:
   \[
   f(x) \sim \mathcal{GP}(m(x), k(x, x'))
   \]
   where \( x \) and \( x' \) are points in the input space.

2. **From Regression to Classification:**
   Gaussian processes are naturally suited for regression. For classification, where the outputs are discrete labels, the continuous output of the Gaussian process \( f(x) \) is transformed using a link function such as the logistic function for binary classification:
   \[
   p(y = 1 | f(x)) = \sigma(f(x)) = \frac{1}{1 + e^{-f(x)}}
   \]
   Here, \( y \) is the class label, and \( \sigma \) denotes the logistic function.

### Algorithmic Flow of Gaussian Process Classification

1. **Prior Distribution:**
   Assume a prior Gaussian process on the latent function \( f \) with mean zero and covariance defined by a kernel function \( k(x, x') \).

2. **Likelihood Function:**
   Given the binary nature of the task, the likelihood for each observation given the latent function is modeled using a Bernoulli distribution:
   \[
   p(y_i | f(x_i)) = \sigma(f(x_i))^{y_i} (1 - \sigma(f(x_i)))^{1 - y_i}
   \]

3. **Posterior Distribution:**
   The posterior distribution over the latent functions given the data \( p(f | X, y) \) is not Gaussian due to the non-Gaussian likelihood. This distribution is typically intractable and requires approximation methods such as Laplace approximation, Expectation Propagation (EP), or Markov Chain Monte Carlo (MCMC) for inference.

   - **Laplace Approximation:** Approximate the mode of the posterior and then approximate the posterior as a Gaussian around this mode.
   - **Expectation Propagation:** Approximate the true posterior by a Gaussian by minimizing the Kullback-Leibler divergence between the true posterior and the approximation.

4. **Prediction:**
   For a new input \( x_* \), the predictive distribution \( p(y_* = 1 | x_*, X, y) \) is computed by integrating over the latent function:
   \[
   p(y_* = 1 | x_*, X, y) = \int \sigma(f(x_*)) p(f(x_*) | X, y) df(x_*)
   \]
   This integral is generally not analytically tractable and is approximated using numerical methods.

5. **Hyperparameter Tuning:**
   The parameters of the kernel function and any parameters of the mean function (if not zero) are typically optimized by maximizing the marginal likelihood of the observed data, which is also generally approximated.

The module should be named GPTGPC.  
It should use 1.0 * RBF(1.0) kernal.
The module must contain a fit function and a predict function.  
The fit function accepts X_train, y_train as input and return None where  
X_train: the features of the train data, which is a numpy array, and the shape of X_train is [N, d]. N is the number of the train data and d is the dimension.  
y_train: the labels pf the train data,which is a numpy array.  
The predict function accepts X_test as input and return predictions where  
X_test: the features of the test data, which is a numpy array, and the shape of X_train is [N, d]. N is the number of the test data and d is the dimension.  
predctions: the predicted classes for X_test, which is a numpy arrary.  
You should just return the code for the module, don't return anything else.