Implement a Theil-Sen regressor for regression with python, numpy and scipy. 
The algorithm calculates least square solutions on subsets with size n_subsamples of the samples in X. Any value of n_subsamples between the number of features and samples leads to an estimator with a compromise between robustness and efficiency. Since the number of least square solutions is "n_samples choose n_subsamples", it can be extremely large and can therefore be limited with max_subpopulation. If this limit is reached, the subsets are chosen randomly. In a final step, the spatial median (or L1 median) is calculated of all least square solutions.

The Theil-Sen estimator is based on the idea of using the median of slopes calculated from all possible pairs of data points. This approach provides a robust estimate of the slope that is not unduly influenced by outliers.

### Algorithmic Flow

1. **Data Preparation**: Assume you have a set of data points \((x_i, y_i)\) for \(i = 1, 2, \ldots, n\).

2. **Compute Pairwise Slopes**: For each pair of points \((x_i, y_i)\) and \((x_j, y_j)\) where \(i < j\), compute the slope \(m_{ij}\) using the formula:
   \[
   m_{ij} = \frac{y_j - y_i}{x_j - x_i}
   \]
   This step involves calculating the slope for all \(\binom{n}{2}\) pairs of points.

3. **Median of Slopes**: The Theil-Sen estimator for the slope \(m\) is the median of all the computed slopes \(m_{ij}\).

4. **Intercept Calculation**: Once the slope \(m\) is determined, the intercept \(b\) can be calculated using the median of the differences \(y_i - mx_i\):
   \[
   b = \text{median}(y_i - mx_i)
   \]

5. **Regression Line**: The resulting regression line is given by the equation:
   \[
   y = mx + b
   \]

The module should be named GPTTheilSenRegressor.  
The module must contain a fit function and a predict function.  
The fit function accepts X_train and y_train and return None where  
X_train: the features of the train data, which is a numpy array, and the shape of X_train is [N, d]. N is the number of the train data and d is the dimension.  
y_train: the labels pf the train data,which is a numpy array.  
The predict function accepts X_test as input and return predictions where  
X_test: the features of the test data, which is a numpy array, and the shape of X_train is [N, d]. N is the number of the test data and d is the dimension.  
predctions: the predicted results for X_test, which is a numpy arrary.  
You should just return the code for the module, don't return anything else.